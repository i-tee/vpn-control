<?php

namespace App\Telegram;

use DefStudio\Telegraph\Handlers\WebhookHandler;
use App\Models\User;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Orchid\Platform\Models\Role;
use App\Models\Transaction;
use DefStudio\Telegraph\Keyboard\Keyboard;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Facades\Telegraph;

class Handler extends WebhookHandler
{

    public function start(): void
    {
        $from = $this->message->from();

        if ($from->isBot()) {
            $this->reply(__('–ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.'));
            return;
        }

        $user = User::where('telegram_id', $from->id())->first();

        if ($user) {
            // –£–∂–µ –±—ã–ª
            $this->greetExisting($from);
        } else {
            // –ü–µ—Ä–≤—ã–π —Ä–∞–∑
            $user = $this->registerUser($from);
            $this->greetNewcomer($from);
            $this->awardBonus($user);
        }
    }

    /**
     * Summary of greetNewcomer
     * @param \DefStudio\Telegraph\DTO\User $from
     * @return void
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     */
    private function greetNewcomer(\DefStudio\Telegraph\DTO\User $from): void
    {
        $d = ceil(config('vpn.entry_bonus') / config('vpn.default_price')); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

        $this->chat->message(
            "üëã –ü—Ä–∏–≤–µ—Ç, {$from->firstName()}!\n" . config('bot.text.welcome') . "\n\n{$d} –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
        )
            ->keyboard(
                Keyboard::make()
                    ->row([Button::make(config('bot.text.creat'))->action('createCanal')])
                    ->row([
                        Button::make(config('bot.button.instruction'))->url(config('bot.link.instruction')),
                        Button::make(config('bot.button.support'))->url(config('bot.link.support'))
                    ])
            )
            ->send();
    }

    private function registerUser(\DefStudio\Telegraph\DTO\User $from): User
    {
        $server = config('vpn.default_server');
        $name   = trim($from->firstName() . ' ' . ($from->lastName() ?? ''))
            ?: 'TG_User_' . $from->id();

        $user = User::create([
            'telegram_id'         => $from->id(),
            'telegram_first_name' => $from->firstName(),
            'telegram_last_name'  => $from->lastName(),
            'telegram_username'   => $from->username(),
            'name'                => $name,
            'email'               => ($from->username() ?: 'tg_' . $from->id()) . "@$server",
            'password'            => bcrypt((string)$from->id()),
        ]);

        $role = Role::where('slug', 'consumer')->first();
        if ($role) {
            $user->roles()->attach($role->id);
        }

        return $user;
    }

    /**
     * Summary of greetExisting
     * @param \DefStudio\Telegraph\DTO\User $from
     * @return void
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     */
    private function greetExisting(\DefStudio\Telegraph\DTO\User $from): void
    {

        $rows = [];

        // –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –∫–Ω–æ–ø–∫–∞ ¬´–°–æ–∑–¥–∞—Ç—å¬ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        $firstRow = [];
        if ($this->user_clients_count() >= 1) {
            $firstRow[] = Button::make(config('bot.text.myclients'))->action('myClients');
        } else {
            $firstRow[] = Button::make(config('bot.text.creat'))->action('createCanal');
        }
        // –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç–æ–π ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        if ($firstRow) {
            $rows[] = $firstRow;
        }

        // –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –≤—Å–µ–≥–¥–∞
        $rows[] = [
            Button::make(config('bot.button.instruction'))->url(config('bot.link.instruction')),
            Button::make(config('bot.button.support'))->url(config('bot.link.support'))
        ];

        // —Ç—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –≤—Å–µ–≥–¥–∞
        $rows[] = [
            Button::make('–ë–∞–ª–∞–Ω—Å')->action('showbalance'),
            Button::make('–ü–æ–ø–æ–ª–Ω–∏—Ç—å')->action('addbalance')->param('uid', $this->message->from()->id()),
        ];

        // —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        $keyboard = Keyboard::make();
        foreach ($rows as $row) {
            $keyboard = $keyboard->row($row);
        }

        $this->chat->message(__('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, :name!', ['name' => $from->firstName()]))
            ->keyboard($keyboard)
            ->send();
    }

    /**
     * /
     * @param \App\Models\User $user
     * @return void
     * –ù–∞—á–∏—Å–ª—è–µ—Ç –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     * –ë–æ–Ω—É—Å –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ vpn.entry_bonus.
     */
    private function awardBonus(User $user): void
    {
        $bonus = config('vpn.entry_bonus');
        try {
            Transaction::createTransaction(
                userId: $user->id,
                type: 'deposit',
                amount: $bonus,
                comment: '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å'
            );
            $this->reply("üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å {$bonus} —É.–µ.!");
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞', [
                'user_id' => $user->id,
                'error'   => $e->getMessage(),
            ]);
        }
    }

    /*******************************************************************************************/

    public function hello()
    {
        $this->reply('–ü—Ä–∏–≤–µ—Ç!');
    }

    public function myvpn(): void
    {
        try {
            // 1. Make sure the method exists inside this class
            $this->myClients();          // ‚Üê will throw if this method is missing
        } catch (\Throwable $e) {
            // 2. Log the real reason
            Log::error('telegram_bot: myvpn action failed', [
                'chat' => $this->chat->chat_id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);

            // 3. Always send *something* back
            $this->reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    public function showbalance(): void
    {
        $user_balance = $this->getBalance();
        $this->chat->message(
            "–í–∞—à –±–∞–ª–∞–Ω—Å: {$user_balance} —É.–µ.
            \n–†–∞—Å—Ö–æ–¥: " . config('vpn.default_price') . " —É.–µ./—Å—É—Ç–∫–∏\n–ï—â—ë –¥–Ω–µ–π: " . ceil($user_balance / config('vpn.default_price'))
        )->send();
    }

    public function addbalance(): void
    {

        $telegramId = $this->data->get('uid');   // –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ callback_data
        $user       = User::where('telegram_id', $telegramId)->first();

        $this->chat->message(config('bot.text.paynenttest') . $user->id)->send();
    
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
    }

    public function instructionRow(): void
    {
        $this->chat->message('–ù–∞—Å—Ç—Ä–æ–π –∑–∞ 1 –º–∏–Ω—É—Ç—É!')   // <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
            ->keyboard(
                Keyboard::make()
                    ->row([
                        Button::make(config('bot.button.instruction'))
                            ->url(config('bot.link.instruction')),
                        Button::make(config('bot.button.support'))
                            ->url(config('bot.link.support'))
                    ])
            )
            ->send();
    }

    public function youid()
    {
        $user_id = $this->user_id();
        $this->reply("–í–∞—à id: {$user_id} ");
    }

    public function y()
    {
        $count_clients = $this->user_clients_count();
        $this->reply("VPN –ö–ª–∏–µ–Ω—Ç–æ–≤: {$count_clients} ");
    }

    public function myClients()
    {
        $clients = $this->user_clients();

        if (empty($clients)) {
            $this->reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VPN-–∫–∞–Ω–∞–ª–æ–≤.');
            return;
        }

        $lines = collect($clients)->map(
            fn($c, $idx) => sprintf(
                "üîë VPN –ö–∞–Ω–∞–ª #%d\n–°–µ—Ä–≤–µ—Ä: %s\n–õ–æ–≥–∏–Ω: <code>%s</code>\n–ü–∞—Ä–æ–ª—å: <code>%s</code>",
                $idx + 1,
                e($c['s']),   // —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
                e($c['n']),
                e($c['p'])
            )
        )->implode("\n\n");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å parse_mode='HTML', —á—Ç–æ–±—ã <code> —Ä–∞–±–æ—Ç–∞–ª
        $this->chat->html($lines)->send();
    }

    public function balance()
    {
        $user_balance = $this->getBalance();
        $this->reply("–í–∞—à –±–∞–ª–∞–Ω—Å: {$user_balance} —É.–µ.");
    }

    public function createCanal()
    {
        if ($this->creatOneRandClient()) {
            $this->reply(config('bot.text.clientcreated'));
            $this->myClients(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            $this->instructionRow(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        } else {
            $this->reply(config('bot.text.clientcreaterror'));
        }
    }

    protected function user_id()
    {
        //$telegramUser = $this->message->from();
        return User::getIdByTelegramId($this->chat->chat_id);
    }

    protected function getBalance()
    {
        //$telegramUser = $this->message->from();
        return User::getBalanceByTelegramId($this->chat->chat_id);
    }

    protected function user_clients_count()
    {
        //$telegramUser = $this->message->from();
        return User::getClientsCountByTelegramId($this->chat->chat_id);
    }

    protected function user_clients()
    {

        // Log::debug('telegram_bot:' . ' -> Start');

        // $telegramUser = $this->message->from();

        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        // Log::debug('telegram_bot /// telegramUser: {user_id}', [
        //     'user_id' => $this->chat->chat_id
        // ]);

        $clients = User::getClientsByTelegramId($this->chat->chat_id);

        // Log::debug('telegram_bot: -> COLIO {clients}', [
        //     'clients' => $clients
        // ]);

        return $clients;
    }

    protected function creatOneRandClient()
    {
        $user_id = $this->user_id();
        return User::creatOneClientFromTelegram($user_id);
    }
}
